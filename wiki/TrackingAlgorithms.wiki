= [SampleApplications Sample Applications]/[TrackingAlgorithms Tracking Algorithms] =
<wiki:toc max_depth="3" />

== Real-Time Natural Feature Tracking ==

http://windage.googlecode.com/svn/trunk/Document/images/Demo_ModifiedSURF.png

   * Modified SURF Tracker Initialize
      * Initialize(Intrinsic_fx, Intrinsic_fy, Intrinsic_cx, Intrinsic_cy, distortion_d1, distortion_d2, distortion_d3, distortion_d4, FAST_CORNER_THRESHOLD)

{{{
((windage::ModifiedSURFTracker*)tracker)->Initialize(778.195, 779.430, 324.659, 235.685, -0.333103, 0.173760, 0.000653, 0.001114, 45);
}}}
      * RegistReferenceImage(referenceImage, referenceImage_real_width, referenceImage_real_height, referenceImage_multiscale_rate, referenceImage_multiscale_level);

{{{
((windage::ModifiedSURFTracker*)tracker)->RegistReferenceImage(referenceImage, 26.70, 19.00, 4.0, 8);
}}}
      * UpdateCameraPose(input_gray_color_image);

{{{
tracker->UpdateCameraPose(grayImage);
}}}


<HR/>

   * Sample Code
{{{
#include "Tracker/ModifiedSURFTracker.h"

// initialize
IplImage* referenceImage = cvLoadImage("reference.png", 0);
windage::Tracker* tracker = new windage::ModifiedSURFTracker();
((windage::ModifiedSURFTracker*)tracker)->Initialize(778.195, 779.430, 324.659, 235.685, -0.333103, 0.173760, 0.000653, 0.001114, 45);
((windage::ModifiedSURFTracker*)tracker)->RegistReferenceImage(referenceImage, 26.70, 19.00, 4.0, 8);

// call tracking algorithm
int result = tracker->UpdateCameraPose(grayImage);

// draw tracking result
tracker->DrawDebugInfo(inputImage);
tracker->DrawInfomation(inputImage, 10.0);
}}}


   * Sample Code with OpticalFlow
{{{
#include "Tracker/ModifiedSURFTracker.h"

// initialize
IplImage* referenceImage = cvLoadImage("reference.png", 0);
windage::Tracker* tracker = new windage::ModifiedSURFTracker();
((windage::ModifiedSURFTracker*)tracker)->Initialize(778.195, 779.430, 324.659, 235.685, -0.333103, 0.173760, 0.000653, 0.001114, 45);
((windage::ModifiedSURFTracker*)tracker)->RegistReferenceImage(referenceImage, 26.70, 19.00, 4.0, 8);

// opticalflow initialize
((windage::ModifiedSURFTracker*)tracker)->InitializeOpticalFlow(WIDTH, HEIGHT, 10, cvSize(15, 15), 3);
((windage::ModifiedSURFTracker*)tracker)->SetOpticalFlowRunning(true);

// call tracking algorithm
int result = tracker->UpdateCameraPose(grayImage);

// draw tracking result
tracker->DrawDebugInfo(inputImage);
tracker->DrawInfomation(inputImage, 10.0);
}}}


<br/><br/><br/>
== Chessboard-based Tracking ==

http://windage.googlecode.com/svn/trunk/Document/images/Demo_MultimethodTracking.png

   * Chessboard Tracker Initialize
      * Initialize(Intrinsic_fx, Intrinsic_fy, Intrinsic_cx, Intrinsic_cy, distortion_d1, distortion_d2, distortion_d3, distortion_d4, chess_width_count, chess_height_count, chess_real_width_size)

{{{
((windage::ChessboardTracker*)tracker)->Initialize(778.195, 779.430, 324.659, 235.685, -0.333103, 0.173760, 0.000653, 0.001114, 7, 8, 2.80);
}}}
      * UpdateCameraPose(input_gray_color_image);

{{{
tracker->UpdateCameraPose(grayImage);
}}}
<HR/>

   * Sample Code
{{{
#include "Tracker/ChessboardTracker.h"

windage::Tracker* tracker = new windage::ChessboardTracker();
((windage::ChessboardTracker*)tracker)->Initialize(778.195, 779.430, 324.659, 235.685, -0.333103, 0.173760, 0.000653, 0.001114, 7, 8, 2.80);

// call tracking algorithm
tracker->UpdateCameraPose(grayImage);

// draw tracking result
tracker->DrawDebugInfo(inputImage);
tracker->DrawInfomation(inputImage, 10.0);
}}}