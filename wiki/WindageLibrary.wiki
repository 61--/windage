= [Index] / [WindageLibrary] =
== Data Structure ==

"windageVector.h"

 * Vector2
 * Vector3
 * Vector4

"windageMatrix.h"

 * Matrix2
 * Matrix3
 * Matrix4
 
 
== CameraCalibration ==
 _Wrapping OpenCV_

"windageCalibration.h"

*_finding Chess Board Corner in Image_*
{{{
int FindChessBoardCorner(CvPoint2D32f* resultPoint, IplImage* image, int chessBoardWidth, int chessBoardHeight);
// CvPoint2D32f * result = new CvPoint2D32f[(chessBoardWidth-1) * (chessBoardHeight-1)];
}}}
 
*_Calcuation of Camera Calibration_* (minimun number of image >= 3)
{{{
/*** output ***/
// Matrix3 &intrinsicMatrix
// Vector4 &distortionCoefficients
// Vector3 rotationVector[imageCount]
// Vector3 translationVector[imageCount]
/*** input ***/
// CvPoint2D32f * cornersArray = new CvPoint2D32f[imageCount * (chessBoardWidth-1) * (chessBoardHeight-1)];
void SolveCalibration(Matrix3* intrinsicMatrix, Vector4* distortionCoefficients, Vector3* rotationVector, Vector3* translationVector,
                      CvPoint2D32f* cornersArray, int chessBoardWidth, int chessBoardHeight, double fieldSize,
                      int imageWidth, int imageHeight, int imageCount);
}}}
 
*_Generation Extrinsic Matrix_*
{{{
void GetExtrinsicMatrix(Matrix4* extrinsicMatrix, Vector3 rotationVector, Vector3 translationVector);
}}}
 
*_Generation UnRadial Distortion Image_*
{{{
void UnRadialDistortion(IplImage* result, IplImage* input, Matrix3 instrinsicMatrix, Vector4 distortionCoefficients 
}}}
 
 
== AugmentedReality ==
 _OpenGL Supporting_

"windageAugmentedReality.h"

*_Drawing the Background Image_* (OpenGL View)
{{{
void DrawBackgroundTexture(IplImage* image, int imageWidth=512, bool isFlip=false);
}}}

*_Projection Matrix and ModelView Matrix Setting_* (OpenGL Values)
{{{
void SetOpenGLCalibrationData(Matrix3 internalMatrix, Matrix3 rotationMatrix, Vector3 translateionVector, int imageWidth, int imageHeight, bool flip);
}}}
 
 
== 3DReconstruction ==
 _Visual Hull Method_

"windageReconstruction.h"
 
 
== FingerTracking ==

"windageFingerTracking.h"